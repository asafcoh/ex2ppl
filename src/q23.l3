(define dict 
  (lambda (pairs) 
    pairs))

(define dict?
  (lambda (val)
    (if (eq? val '())
        #t
        (if (and (pair? (car val))
                 (symbol? (car (car val)))
                 (not (pair? (cdr (car val)))))
            (dict? (cdr val))
            #f))))

(define make-error 
  (lambda (msg) 
    (list 'error msg)))

(define is-error? 
  (lambda (val) 
    (and (pair? val) (eq? (car val) 'error))))

(define get
  (lambda (d k)
    (if (or (not (pair? d)) (eq? d '()))
        (make-error "key not found")
        (if (and (pair? (car d))
                 (eq? (car (car d)) k))
            (cdr (car d))
            (get (cdr d) k)))))

(define bind
  (lambda (val f)
    (if (is-error? val)
        val
        (f val))))

